{"version":3,"sources":["components/NuevaCita.js","components/Formulario.js","App.js","serviceWorker.js","index.js"],"names":["NuevaCita","cita","guardarCita","guardarTarea","guardarEdita","guardarIndex","className","map","cit","index","uk-icon","onClick","newCita","indexOf","splice","localStorage","setItem","JSON","stringify","borra","edita","Formulario","useState","tarea","useEffect","citas","parse","getItem","elemento","handleChange","e","target","value","onSubmit","preventDefault","type","name","onChange","maxlength","length","nuevaCita","placeholder","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6705f532.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst NuevaCita = ({cita, guardarCita, guardarTarea, guardarEdita, guardarIndex}) => {\r\n\r\n   const borra = (cit) => {\r\n   const newCita = [...cita];\r\n   const index = newCita.indexOf(cit.cit);\r\n    newCita.splice(index, 1);\r\n  \r\n    guardarCita(newCita);\r\n    localStorage.setItem(\"cita\",  JSON.stringify(newCita));\r\n   }\r\n\r\n   const edita = (cit) => {\r\n    const newCita = [...cita];\r\n    const index = newCita.indexOf(cit.cit);\r\n    \r\n    guardarTarea(newCita[index]);\r\n    guardarIndex(index);\r\n    guardarEdita(true);\r\n\r\n   }\r\n    return (\r\n        <div className=\"cita\">\r\n           {cita.map ((cit, index) =>(\r\n               <div className=\"cada\">\r\n                   \r\n                <p>{cit}</p><div className=\"iconos\"><span className=\"uk-margin-small-right\" uk-icon=\"trash\"  onClick={()=>{borra({cit})}}></span><span uk-icon=\"pencil\"  onClick={()=>{edita({cit})}}></span></div></div>\r\n           ))}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default NuevaCita;","import React, {useState, useEffect} from 'react';\r\nimport NuevaCita from './NuevaCita';\r\n\r\n\r\nconst Formulario = ({guardarCita, cita}) => {\r\n\r\n    const [tarea, guardarTarea] = useState('');\r\n    const [edita, guardarEdita] = useState(false);\r\n    const [index, guardarIndex] = useState();\r\n\r\n    useEffect(() => {\r\n        const citas = JSON.parse(localStorage.getItem(\"cita\"));\r\n\r\n        if(citas == null ) {\r\n            return;\r\n        }\r\n        else {\r\n        guardarCita(citas);\r\n        }\r\n    }, []);\r\n\r\n    const handleChange = (e) => {\r\n       \r\n        guardarTarea(e.target.value);\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n\r\n        if(!tarea || tarea === '' || tarea.length === 0 || tarea == null) {\r\n             e.preventDefault();\r\n             return;\r\n        }\r\n        else {\r\n  \r\n            e.preventDefault();\r\n            const nuevaCita = [...cita, tarea];\r\n            guardarCita(nuevaCita);\r\n            guardarTarea('');\r\n            localStorage.setItem(\"cita\",  JSON.stringify(nuevaCita));\r\n            }\r\n        \r\n    }\r\n\r\n    const handleEdit = (e) => {\r\n        if(!tarea || tarea === '') {\r\n            e.preventDefault();\r\n            return;\r\n       }\r\n       else {\r\n        e.preventDefault();\r\n        const newCita = [...cita];\r\n        newCita[index] = tarea;\r\n        guardarCita(newCita);\r\n\r\n        guardarEdita(false);\r\n        guardarTarea('');\r\n        localStorage.setItem(\"cita\",  JSON.stringify(newCita));\r\n       }\r\n    }\r\n\r\n    const clear = () => {\r\n        guardarCita([]);\r\n        const vacio = [];\r\n        localStorage.setItem(\"cita\",  JSON.stringify(vacio));\r\n    }\r\n    let elemento;\r\n\r\n    if(edita) {\r\n     \r\n         elemento = <form onSubmit={handleEdit}>\r\n              <div className = \"rel\">\r\n         <input className=\"uk-input uk-form-width-large in\" type=\"text\" name=\"task\" onChange={handleChange} value={tarea}  maxlength=\"28\"/>\r\n         <div className = \"cuenta\">{28 - tarea.length}</div>\r\n        </div>\r\n         <input className=\"uk-input uk-form-width-small boton  uk-margin-small-right\" type=\"submit\" value=\"Edit Task\"/>\r\n         <input className=\"uk-input uk-form-width-small boton\" type=\"submit\" value=\"Clear\"/>\r\n       \r\n     </form>\r\n    }\r\n    else {\r\n        elemento = <form onSubmit={handleSubmit}>\r\n            <div className = \"rel\">\r\n        \r\n        \r\n        <input className=\"uk-input uk-form-width-large in\" type=\"text\" name=\"task\" onChange={handleChange} value={tarea} placeholder=\"Insert Task..\"  maxlength=\"28\"/>\r\n        <div className = \"cuenta\">{28 - tarea.length}</div>\r\n        </div>\r\n        <input className=\"uk-input uk-form-width-small boton uk-margin-small-right\" type=\"submit\" value=\"Add Task\"/>\r\n        <input className=\"uk-input uk-form-width-small boton\" type=\"button\" value=\"Clear\" onClick={clear}/>\r\n     \r\n    </form>\r\n    }\r\n\r\n\r\n    return (\r\n        <div  className=\"contenedor\">\r\n            <h1>Task Manager</h1>\r\n        <div>\r\n         \r\n         {elemento}\r\n        </div>\r\n\r\n        <NuevaCita \r\n        cita={cita} \r\n        guardarCita={guardarCita} \r\n        guardarTarea={guardarTarea}\r\n        guardarEdita={guardarEdita}\r\n        guardarIndex={guardarIndex}/>\r\n        \r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Formulario;\r\n\r\n\r\n","import React, { useState } from 'react';\nimport Formulario from './components/Formulario';\n\n\nfunction App() {\n\n  const [cita, guardarCita] = useState([]);\n  \n  return (\n        <Formulario cita={cita} guardarCita={guardarCita}/>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}